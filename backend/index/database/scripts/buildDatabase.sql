CREATE TYPE AUTHOR_ARRAY AS
    VARRAY(100) OF VARCHAR2(2048);
/

-- Create table SOURCE
CREATE TABLE SOURCE (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SOURCE_NAME VARCHAR2(255) UNIQUE NOT NULL,
    BASE_URL VARCHAR2(2048),
    ICON BLOB NOT NULL
);

-- Create table DOCUMENT
CREATE TABLE DOCUMENT (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TITLE VARCHAR2(2048) NOT NULL,
    AUTHORS AUTHOR_ARRAY NOT NULL,
    SUMMARY CLOB NOT NULL,
    DOCUMENT_TYPE VARCHAR2(50) NOT NULL CHECK (DOCUMENT_TYPE IN ('paper', 'website')),
    DOI VARCHAR2(256) UNIQUE,
    COUNTRY VARCHAR2(256),
    PUBLISH_DATE DATE,
    DOCUMENT_URL VARCHAR2(2048) NOT NULL,
    DOCUMENT_LENGTH NUMBER NOT NULL,
    DOCUMENT_LANGUAGE VARCHAR2(50) NOT NULL CHECK (DOCUMENT_LANGUAGE IN ('spanish', 'english')),
    SOURCE_ID NUMBER NOT NULL,
    CONSTRAINT FK_SOURCE FOREIGN KEY (SOURCE_ID) REFERENCES SOURCE (ID)
);

-- Create table TERM
CREATE TABLE TERM (
    TERM VARCHAR2(255) PRIMARY KEY,
    DOCUMENT_FREQUENCY NUMBER DEFAULT 0 NOT NULL,
    IDF NUMBER DEFAULT 0 NOT NULL
);

-- Create table APPEARS
CREATE TABLE APPEARS (
    DOCUMENT_ID NUMBER NOT NULL,
    TERM VARCHAR2(255) NOT NULL,
    TERM_FREQUENCY NUMBER NOT NULL,
    PRIMARY KEY (DOCUMENT_ID, TERM),
    CONSTRAINT FK_DOCUMENT FOREIGN KEY (DOCUMENT_ID) REFERENCES DOCUMENT (ID),
    CONSTRAINT FK_TERM FOREIGN KEY (TERM) REFERENCES TERM (TERM)
);

-- Create table DOCUMENT_STATISTICS
CREATE TABLE DOCUMENT_STATISTICS (
    DOCUMENT_COUNT NUMBER NOT NULL,
    AVERAGE_DOCUMENT_LENGTH NUMBER NOT NULL
);

-- Trigger to maintain document statistics
CREATE OR REPLACE TRIGGER UPDATE_DOCUMENT_STATISTICS AFTER
    INSERT OR UPDATE ON DOCUMENT FOR EACH ROW
DECLARE
    NEW_DOCUMENT_COUNT          NUMBER;
    NEW_AVERAGE_DOCUMENT_LENGTH NUMBER;
BEGIN
 
    -- Compute document count
    SELECT
        COUNT(*) INTO NEW_DOCUMENT_COUNT
    FROM
        DOCUMENT;
 
    -- Compute average document length
    SELECT
        AVG(DOCUMENT_LENGTH) INTO NEW_AVERAGE_DOCUMENT_LENGTH
    FROM
        DOCUMENT;
 
    -- Try to update statistics if they exist
    UPDATE DOCUMENT_STATISTICS
    SET
        DOCUMENT_COUNT = NEW_DOCUMENT_COUNT,
        AVERAGE_DOCUMENT_LENGTH = NEW_AVERAGE_DOCUMENT_LENGTH;
 
    -- If nothing got updated, then insert
    IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO DOCUMENT_STATISTICS (
            DOCUMENT_COUNT,
            AVERAGE_DOCUMENT_LENGTH
        ) VALUES (
            NEW_DOCUMENT_COUNT,
            NEW_AVERAGE_DOCUMENT_LENGTH
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER UPDATE_TERM_STATISTICS AFTER
    INSERT ON APPEARS FOR EACH ROW
DECLARE
    NEW_DOCUMENT_FREQUENCY NUMBER;
    NEW_IDF                NUMBER;
BEGIN
 
    -- Compute document frequency
    SELECT
        COUNT(DISTINCT DOCUMENT_ID) INTO NEW_DOCUMENT_FREQUENCY
    FROM
        APPEARS
    WHERE
        TERM = :NEW.TERM;
 
    -- Compute document count
    SELECT
        LOG(DOCUMENT_COUNT / NEW_DOCUMENT_FREQUENCY, 10) INTO NEW_IDF
    FROM
        DOCUMENT_STATISTICS;
 
    -- Update document frequency and IDF in TERM
    UPDATE TERM
    SET
        DOCUMENT_FREQUENCY = NEW_DOCUMENT_FREQUENCY + :NEW.TERM_FREQUENCY,
        IDF = NEW_IDF
    WHERE
        TERM = :NEW.TERM;
END;